Result for running Dominion tests:
unittest1.c
-------------------- UNIT TEST 1: isGameOver() --------------------

Beginning test with 2 players...

Initializing game...


Game initialized.

-------------------------------------------------------------------

Win Conditions:
1. There are no more Province cards in the Supply.
2. Three (3) or more Supply piles are empty (includes all piles).

-------------------------------------------------------------------

Test 1: Only Province pile is empty.

	Expected result: 1
	Result: 1
		PASSED

Test 2: 3 Supply piles are empty...

	2.1 First 3 piles {curse, estate, duchy} empty.

	Expected result: 1
	Result: 1
		PASSED

	2.2 Last 3 piles {salvager, sea_hag, treasure_map} empty.

	Expected result: 1
	Result: 0
		***FAILED***

	2.3 1 Victory, 1 Treasure, 1 Action {copper, estate, smithy}
	empty.

	Expected result: 1
	Result: 1
		PASSED

	2.4 3 piles, including province, {estate, province, smithy}
	are empty.

	Expected result: 1
	Result: 1
		PASSED

Test 3: 3 Supply piles are empty AND Province pile is empty...

	3.1 Province empty AND first 3 piles {curse, estate, duchy}
	empty.

	Expected result: 1
	Result: 1
		PASSED

	3.2 Province empty AND last 3 piles {salvager, sea_hag,
	treasure_map} empty.

	Expected result: 1
	Result: 1
		PASSED

	3.3 Province empty AND 1 Victory, 1 Treasure, 1 Action
	{copper, estate, smithy} empty.

	Expected result: 1
	Result: 1
		PASSED

	3.4 All piles empty.

	Expected result: 1
	Result: 1
		PASSED

Test 4: <3 Supply piles are empty and Province pile is NOT empty
(game not over)...

	4.1 All piles are full.

	Expected result: 0
	Result: 0
		PASSED

	4.2 All piles have at least one card.

	Expected result: 0
	Result: 0
		PASSED

	4.3 Only 2 piles {adventurer, smithy} are empty.

	Expected result: 0
	Result: 0
		PASSED

-------------------------------------------------------------------

TESTING COMPLETE
There was 1 failure.

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'cardSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 203
Branches executed:0.00% of 173
Taken at least once:0.00% of 173
Calls executed:0.00% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:17.74% of 558
Branches executed:17.75% of 417
Taken at least once:14.63% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

unittest2.c
-------------------- UNIT TEST 2: gainCard() --------------------

Beginning test with 2 players...

Initializing game...


Game initialized.

-------------------------------------------------------------------

Possible Inputs and Outputs:

1. Discard card (toFlag = 0) -> Card at supplyPos is added to the
player's discard pile, incrementing the player's discard count. The
Supply Count for the appropriate pile is decremented.

2. Add card to deck (toFlag = 1) -> Card at supplyPos is added to
the player's deck, incrementing the player's deck count. The Supply
Count for the appropriate pile is decremented.

3. Add card to hand (toFlag = 2) -> Card at supplyPos is added to
the player's hand, incrementing the player's hand count. The Supply
Count for the appropriate pile is decremented.

4. Invalid Choice (Pile at supplyPos is empty) -> Return -1. The
player's discard pile, deck, and hand remain unchanged. The Supply
Count has not been decremented.

-------------------------------------------------------------------

Test 1: Gain card to player's discard pile (toFlag = 0)

	Gaining Curse:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 1:			PASSED
		Card Type 0 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Estate:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 2:			PASSED
		Card Type 1 Added
		to Discard Pile:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Duchy:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 3:			PASSED
		Card Type 2 Added
		to Discard Pile:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Province:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 4:			PASSED
		Card Type 3 Added
		to Discard Pile:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Copper:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 5:			PASSED
		Card Type 4 Added
		to Discard Pile:		PASSED
		Supply Count (46)
		Decremented by 1 (45):		PASSED

	Gaining Silver:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 6:			PASSED
		Card Type 5 Added
		to Discard Pile:		PASSED
		Supply Count (40)
		Decremented by 1 (39):		PASSED

	Gaining Gold:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 7:			PASSED
		Card Type 6 Added
		to Discard Pile:		PASSED
		Supply Count (30)
		Decremented by 1 (29):		PASSED

	Gaining Adventurer:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 8:			PASSED
		Card Type 7 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Gardens:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 9:			PASSED
		Card Type 10 Added
		to Discard Pile:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Mine:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 10:			PASSED
		Card Type 11 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Smithy:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 11:			PASSED
		Card Type 13 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Village:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 12:			PASSED
		Card Type 14 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Minion:		
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 13:			PASSED
		Card Type 17 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Embargo:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 14:			PASSED
		Card Type 22 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Salvager:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 15:			PASSED
		Card Type 24 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Sea Hag:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 16:			PASSED
		Card Type 25 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Treasure Map:	
		Function Returns 0:		PASSED
		Discard Count for
		Player 0 = 17:			PASSED
		Card Type 26 Added
		to Discard Pile:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

Resetting game...


Game reset.

Test 2: Gain card to player's deck (toFlag = 1)

	Gaining Curse:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 6:			PASSED
		Card Type 0 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Estate:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 7:			PASSED
		Card Type 1 Added
		to Player's Deck:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Duchy:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 8:			PASSED
		Card Type 2 Added
		to Player's Deck:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Province:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 9:			PASSED
		Card Type 3 Added
		to Player's Deck:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Copper:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 10:			PASSED
		Card Type 4 Added
		to Player's Deck:		PASSED
		Supply Count (46)
		Decremented by 1 (45):		PASSED

	Gaining Silver:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 11:			PASSED
		Card Type 5 Added
		to Player's Deck:		PASSED
		Supply Count (40)
		Decremented by 1 (39):		PASSED

	Gaining Gold:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 12:			PASSED
		Card Type 6 Added
		to Player's Deck:		PASSED
		Supply Count (30)
		Decremented by 1 (29):		PASSED

	Gaining Adventurer:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 13:			PASSED
		Card Type 7 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Gardens:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 14:			PASSED
		Card Type 10 Added
		to Player's Deck:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Mine:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 15:			PASSED
		Card Type 11 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Smithy:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 16:			PASSED
		Card Type 13 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Village:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 17:			PASSED
		Card Type 14 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Minion:		
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 18:			PASSED
		Card Type 17 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Embargo:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 19:			PASSED
		Card Type 22 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Salvager:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 20:			PASSED
		Card Type 24 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Sea Hag:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 21:			PASSED
		Card Type 25 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Treasure Map:	
		Function Returns 0:		PASSED
		Deck Count for
		Player 0 = 22:			PASSED
		Card Type 26 Added
		to Player's Deck:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

Resetting game...


Game reset.

Test 3: Gain card to player's hand (toFlag = 2)

	Gaining Curse:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 6:			PASSED
		Card Type 0 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Estate:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 7:			PASSED
		Card Type 1 Added
		to Player's Hand:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Duchy:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 8:			PASSED
		Card Type 2 Added
		to Player's Hand:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Province:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 9:			PASSED
		Card Type 3 Added
		to Player's Hand:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Copper:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 10:			PASSED
		Card Type 4 Added
		to Player's Hand:		PASSED
		Supply Count (46)
		Decremented by 1 (45):		PASSED

	Gaining Silver:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 11:			PASSED
		Card Type 5 Added
		to Player's Hand:		PASSED
		Supply Count (40)
		Decremented by 1 (39):		PASSED

	Gaining Gold:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 12:			PASSED
		Card Type 6 Added
		to Player's Hand:		PASSED
		Supply Count (30)
		Decremented by 1 (29):		PASSED

	Gaining Adventurer:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 13:			PASSED
		Card Type 7 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Gardens:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 14:			PASSED
		Card Type 10 Added
		to Player's Hand:		PASSED
		Supply Count (8)
		Decremented by 1 (7):		PASSED

	Gaining Mine:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 15:			PASSED
		Card Type 11 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Smithy:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 16:			PASSED
		Card Type 13 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Village:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 17:			PASSED
		Card Type 14 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Minion:		
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 18:			PASSED
		Card Type 17 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Embargo:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 19:			PASSED
		Card Type 22 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Salvager:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 20:			PASSED
		Card Type 24 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Sea Hag:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 21:			PASSED
		Card Type 25 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

	Gaining Treasure Map:	
		Function Returns 0:		PASSED
		Hand Count for
		Player 0 = 22:			PASSED
		Card Type 26 Added
		to Player's Hand:		PASSED
		Supply Count (10)
		Decremented by 1 (9):		PASSED

Resetting game...


Game reset.

Test 4: Attempt to draw card from empty pile (Curse)

	Attempt to gain card
	rejected:			PASSED
	Supply Count unchanged:		PASSED
	Deck Count unchanged:		PASSED
-------------------------------------------------------------------

TESTING COMPLETE
SUCCESS -- No failures!

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'cardSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 203
Branches executed:0.00% of 173
Taken at least once:0.00% of 173
Calls executed:0.00% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:20.43% of 558
Branches executed:19.18% of 417
Taken at least once:16.07% of 417
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

unittest3.c
-------------------- UNIT TEST 3: discardCard() --------------------

Beginning test with 2 players...

Initializing game...


Game initialized.

-------------------------------------------------------------------

Possible Inputs and Outputs:

1. DISCARD - Trash flag is set to false. Card is meant to be
discarded, not played. In all below cases, the correct card is
added to the end of the player's discard array and the discard count
for the correct player has been incremented by 1.

	1a. Discard last card in hand (handPos = handCount[player]-1).

	1b. Discard first card in hand (handPos = 0) until hand is
	empty.

2. PLAY - Trash flag is set to false. Card is meant to be played,
not discarded. In all below cases, the correct card is added to
the end of the playedCards array (to be discarded later during
the cleanup phase) and the played card count has been incremented
by 1.

	1a. Discard last card in hand (handPos = handCount[player]-1).

	1b. Discard first card in hand (handPos = 0) until hand is
	empty.

3. TRASH - Trash flag is set to true. In all below cases, the correct
card is simply overwritten (i.e. the player's Discard pile, discard
count, Played Cards pile, and played card count are not modified.

	2a. Trash last card in hand (handPos = handCount[player]-1).

	2b. Trash first card in hand (handpos = 0) until hand is
	empty.

-------------------------------------------------------------------

Test 1: Discard with intent to move card to discard pile.

	Discard card 4 (last card) in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand = -1:		PASSED
		Player's discardCount
		incremented:			***FAILED***
		Selected card is last
		item in player's discard
		pile matches card:		***FAILED***

	Discard card 0 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Player's discardCount
		incremented:			***FAILED***
		Selected card is last
		item in player's discard
		pile matches card:		***FAILED***

	Discard card 1 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Player's discardCount
		incremented:			***FAILED***
		Selected card is last
		item in player's discard
		pile matches card:		***FAILED***

	Discard card 2 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Player's discardCount
		incremented:			***FAILED***
		Selected card is last
		item in player's discard
		pile matches card:		***FAILED***

	Discard card 3 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (-1):			PASSED
		Player's discardCount
		incremented:			***FAILED***
		Selected card is last
		item in player's discard
		pile matches card:		***FAILED***

Resetting game...


Game reset.

Test 2: Discard with intent to move card to played cards pile.

	Discard card 4 (last card) in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand = -1:		PASSED
		Played Card Count
		incremented:			PASSED
		Selected card is last
		item in played cards
		pile:				PASSED

	Discard card 0 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Played Card Count
		incremented:			PASSED
		Selected card is last
		item in played cards
		pile:				PASSED

	Discard card 1 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Played Card Count
		incremented:			PASSED
		Selected card is last
		item in played cards
		pile:				PASSED

	Discard card 2 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Played Card Count
		incremented:			PASSED
		Selected card is last
		item in played cards
		pile:				PASSED

	Discard card 3 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (-1):			PASSED
		Played Card Count
		incremented:			PASSED
		Selected card is last
		item in played cards
		pile:				PASSED

Resetting game...


Game reset.

Test 3: Trash card

	Trash card 4 (last card) in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand = -1:		PASSED
		Played Card Count
		NOT incremented:		PASSED
		Discard Count
		NOT incremented:		PASSED
	Trash card 0 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Played Card Count
		NOT incremented:		PASSED
		Discard Count NOT
		incremented:			PASSED

	Trash card 1 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Played Card Count
		NOT incremented:		PASSED
		Discard Count NOT
		incremented:			PASSED

	Trash card 2 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (4):			PASSED
		Played Card Count
		NOT incremented:		PASSED
		Discard Count NOT
		incremented:			PASSED

	Trash card 3 in player 0's hand...
		Function returns 0:		PASSED
		Hand count decremented:		PASSED
		Position in hand
		replaced with last
		card (-1):			PASSED
		Played Card Count
		NOT incremented:		PASSED
		Discard Count NOT
		incremented:			PASSED

-------------------------------------------------------------------

TESTING COMPLETE
There were 10 failures.

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'cardSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 203
Branches executed:0.00% of 173
Taken at least once:0.00% of 173
Calls executed:0.00% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.76% of 558
Branches executed:20.62% of 417
Taken at least once:17.51% of 417
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

unittest4.c
-------------------- UNIT TEST 4: updateCoins() --------------------

Beginning test with 2 players...

Initializing game...


Game initialized.

-------------------------------------------------------------------

Possible Inputs and Outputs:

For each test bonus value in the set {0, 1, 5, 10, MAX_BONUS, -1}...

	For each hand size in the set handCount[activePlayer] =
	{0, 1, 5, 10, MAX_HAND}...

		1. Set hand to all copper.

		2. Set hand to all silver.

		3. Set hand to all gold.

		4. Set hand to no treasure.

-------------------------------------------------------------------

-- BONUS = 0 -----------------------------------------------------

	 HAND SIZE = 0

		ALL COPPER
		Expected Coins = 0 * 1 + 0 = 0
		Result Coins = 0
		PASSED

		ALL SILVER
		Expected Coins = 0 * 2 + 0 = 0
		Result Coins = 0
		PASSED

		ALL GOLD
		Expected Coins = 0 * 3 + 0 = 0
		Result Coins = 0
		PASSED

		NO TREASURE
		Expected Coins = 0
		Result Coins = 0
		PASSED

	 HAND SIZE = 1

		ALL COPPER
		Expected Coins = 1 * 1 + 0 = 1
		Result Coins = 1
		PASSED

		ALL SILVER
		Expected Coins = 1 * 2 + 0 = 2
		Result Coins = 2
		PASSED

		ALL GOLD
		Expected Coins = 1 * 3 + 0 = 3
		Result Coins = 3
		PASSED

		NO TREASURE
		Expected Coins = 0
		Result Coins = 0
		PASSED

	 HAND SIZE = 5

		ALL COPPER
		Expected Coins = 5 * 1 + 0 = 5
		Result Coins = 5
		PASSED

		ALL SILVER
		Expected Coins = 5 * 2 + 0 = 10
		Result Coins = 10
		PASSED

		ALL GOLD
		Expected Coins = 5 * 3 + 0 = 15
		Result Coins = 15
		PASSED

		NO TREASURE
		Expected Coins = 0
		Result Coins = 0
		PASSED

	 HAND SIZE = 10

		ALL COPPER
		Expected Coins = 10 * 1 + 0 = 10
		Result Coins = 10
		PASSED

		ALL SILVER
		Expected Coins = 10 * 2 + 0 = 20
		Result Coins = 20
		PASSED

		ALL GOLD
		Expected Coins = 10 * 3 + 0 = 30
		Result Coins = 30
		PASSED

		NO TREASURE
		Expected Coins = 0
		Result Coins = 0
		PASSED

	 HAND SIZE = 500

		ALL COPPER
		Expected Coins = 500 * 1 + 0 = 500
		Result Coins = 500
		PASSED

		ALL SILVER
		Expected Coins = 500 * 2 + 0 = 1000
		Result Coins = 1000
		PASSED

		ALL GOLD
		Expected Coins = 500 * 3 + 0 = 1500
		Result Coins = 1500
		PASSED

		NO TREASURE
		Expected Coins = 0
		Result Coins = 0
		PASSED

-- BONUS = 1 -----------------------------------------------------

	 HAND SIZE = 0

		ALL COPPER
		Expected Coins = 0 * 1 + 1 = 1
		Result Coins = 1
		PASSED

		ALL SILVER
		Expected Coins = 0 * 2 + 1 = 1
		Result Coins = 1
		PASSED

		ALL GOLD
		Expected Coins = 0 * 3 + 1 = 1
		Result Coins = 1
		PASSED

		NO TREASURE
		Expected Coins = 1
		Result Coins = 1
		PASSED

	 HAND SIZE = 1

		ALL COPPER
		Expected Coins = 1 * 1 + 1 = 2
		Result Coins = 2
		PASSED

		ALL SILVER
		Expected Coins = 1 * 2 + 1 = 3
		Result Coins = 3
		PASSED

		ALL GOLD
		Expected Coins = 1 * 3 + 1 = 4
		Result Coins = 4
		PASSED

		NO TREASURE
		Expected Coins = 1
		Result Coins = 1
		PASSED

	 HAND SIZE = 5

		ALL COPPER
		Expected Coins = 5 * 1 + 1 = 6
		Result Coins = 6
		PASSED

		ALL SILVER
		Expected Coins = 5 * 2 + 1 = 11
		Result Coins = 11
		PASSED

		ALL GOLD
		Expected Coins = 5 * 3 + 1 = 16
		Result Coins = 16
		PASSED

		NO TREASURE
		Expected Coins = 1
		Result Coins = 1
		PASSED

	 HAND SIZE = 10

		ALL COPPER
		Expected Coins = 10 * 1 + 1 = 11
		Result Coins = 11
		PASSED

		ALL SILVER
		Expected Coins = 10 * 2 + 1 = 21
		Result Coins = 21
		PASSED

		ALL GOLD
		Expected Coins = 10 * 3 + 1 = 31
		Result Coins = 31
		PASSED

		NO TREASURE
		Expected Coins = 1
		Result Coins = 1
		PASSED

	 HAND SIZE = 500

		ALL COPPER
		Expected Coins = 500 * 1 + 1 = 501
		Result Coins = 501
		PASSED

		ALL SILVER
		Expected Coins = 500 * 2 + 1 = 1001
		Result Coins = 1001
		PASSED

		ALL GOLD
		Expected Coins = 500 * 3 + 1 = 1501
		Result Coins = 1501
		PASSED

		NO TREASURE
		Expected Coins = 1
		Result Coins = 1
		PASSED

-- BONUS = 5 -----------------------------------------------------

	 HAND SIZE = 0

		ALL COPPER
		Expected Coins = 0 * 1 + 5 = 5
		Result Coins = 5
		PASSED

		ALL SILVER
		Expected Coins = 0 * 2 + 5 = 5
		Result Coins = 5
		PASSED

		ALL GOLD
		Expected Coins = 0 * 3 + 5 = 5
		Result Coins = 5
		PASSED

		NO TREASURE
		Expected Coins = 5
		Result Coins = 5
		PASSED

	 HAND SIZE = 1

		ALL COPPER
		Expected Coins = 1 * 1 + 5 = 6
		Result Coins = 6
		PASSED

		ALL SILVER
		Expected Coins = 1 * 2 + 5 = 7
		Result Coins = 7
		PASSED

		ALL GOLD
		Expected Coins = 1 * 3 + 5 = 8
		Result Coins = 8
		PASSED

		NO TREASURE
		Expected Coins = 5
		Result Coins = 5
		PASSED

	 HAND SIZE = 5

		ALL COPPER
		Expected Coins = 5 * 1 + 5 = 10
		Result Coins = 10
		PASSED

		ALL SILVER
		Expected Coins = 5 * 2 + 5 = 15
		Result Coins = 15
		PASSED

		ALL GOLD
		Expected Coins = 5 * 3 + 5 = 20
		Result Coins = 20
		PASSED

		NO TREASURE
		Expected Coins = 5
		Result Coins = 5
		PASSED

	 HAND SIZE = 10

		ALL COPPER
		Expected Coins = 10 * 1 + 5 = 15
		Result Coins = 15
		PASSED

		ALL SILVER
		Expected Coins = 10 * 2 + 5 = 25
		Result Coins = 25
		PASSED

		ALL GOLD
		Expected Coins = 10 * 3 + 5 = 35
		Result Coins = 35
		PASSED

		NO TREASURE
		Expected Coins = 5
		Result Coins = 5
		PASSED

	 HAND SIZE = 500

		ALL COPPER
		Expected Coins = 500 * 1 + 5 = 505
		Result Coins = 505
		PASSED

		ALL SILVER
		Expected Coins = 500 * 2 + 5 = 1005
		Result Coins = 1005
		PASSED

		ALL GOLD
		Expected Coins = 500 * 3 + 5 = 1505
		Result Coins = 1505
		PASSED

		NO TREASURE
		Expected Coins = 5
		Result Coins = 5
		PASSED

-- BONUS = 10 -----------------------------------------------------

	 HAND SIZE = 0

		ALL COPPER
		Expected Coins = 0 * 1 + 10 = 10
		Result Coins = 10
		PASSED

		ALL SILVER
		Expected Coins = 0 * 2 + 10 = 10
		Result Coins = 10
		PASSED

		ALL GOLD
		Expected Coins = 0 * 3 + 10 = 10
		Result Coins = 10
		PASSED

		NO TREASURE
		Expected Coins = 10
		Result Coins = 10
		PASSED

	 HAND SIZE = 1

		ALL COPPER
		Expected Coins = 1 * 1 + 10 = 11
		Result Coins = 11
		PASSED

		ALL SILVER
		Expected Coins = 1 * 2 + 10 = 12
		Result Coins = 12
		PASSED

		ALL GOLD
		Expected Coins = 1 * 3 + 10 = 13
		Result Coins = 13
		PASSED

		NO TREASURE
		Expected Coins = 10
		Result Coins = 10
		PASSED

	 HAND SIZE = 5

		ALL COPPER
		Expected Coins = 5 * 1 + 10 = 15
		Result Coins = 15
		PASSED

		ALL SILVER
		Expected Coins = 5 * 2 + 10 = 20
		Result Coins = 20
		PASSED

		ALL GOLD
		Expected Coins = 5 * 3 + 10 = 25
		Result Coins = 25
		PASSED

		NO TREASURE
		Expected Coins = 10
		Result Coins = 10
		PASSED

	 HAND SIZE = 10

		ALL COPPER
		Expected Coins = 10 * 1 + 10 = 20
		Result Coins = 20
		PASSED

		ALL SILVER
		Expected Coins = 10 * 2 + 10 = 30
		Result Coins = 30
		PASSED

		ALL GOLD
		Expected Coins = 10 * 3 + 10 = 40
		Result Coins = 40
		PASSED

		NO TREASURE
		Expected Coins = 10
		Result Coins = 10
		PASSED

	 HAND SIZE = 500

		ALL COPPER
		Expected Coins = 500 * 1 + 10 = 510
		Result Coins = 510
		PASSED

		ALL SILVER
		Expected Coins = 500 * 2 + 10 = 1010
		Result Coins = 1010
		PASSED

		ALL GOLD
		Expected Coins = 500 * 3 + 10 = 1510
		Result Coins = 1510
		PASSED

		NO TREASURE
		Expected Coins = 10
		Result Coins = 10
		PASSED

-- BONUS = 100 -----------------------------------------------------

	 HAND SIZE = 0

		ALL COPPER
		Expected Coins = 0 * 1 + 100 = 100
		Result Coins = 100
		PASSED

		ALL SILVER
		Expected Coins = 0 * 2 + 100 = 100
		Result Coins = 100
		PASSED

		ALL GOLD
		Expected Coins = 0 * 3 + 100 = 100
		Result Coins = 100
		PASSED

		NO TREASURE
		Expected Coins = 100
		Result Coins = 100
		PASSED

	 HAND SIZE = 1

		ALL COPPER
		Expected Coins = 1 * 1 + 100 = 101
		Result Coins = 101
		PASSED

		ALL SILVER
		Expected Coins = 1 * 2 + 100 = 102
		Result Coins = 102
		PASSED

		ALL GOLD
		Expected Coins = 1 * 3 + 100 = 103
		Result Coins = 103
		PASSED

		NO TREASURE
		Expected Coins = 100
		Result Coins = 100
		PASSED

	 HAND SIZE = 5

		ALL COPPER
		Expected Coins = 5 * 1 + 100 = 105
		Result Coins = 105
		PASSED

		ALL SILVER
		Expected Coins = 5 * 2 + 100 = 110
		Result Coins = 110
		PASSED

		ALL GOLD
		Expected Coins = 5 * 3 + 100 = 115
		Result Coins = 115
		PASSED

		NO TREASURE
		Expected Coins = 100
		Result Coins = 100
		PASSED

	 HAND SIZE = 10

		ALL COPPER
		Expected Coins = 10 * 1 + 100 = 110
		Result Coins = 110
		PASSED

		ALL SILVER
		Expected Coins = 10 * 2 + 100 = 120
		Result Coins = 120
		PASSED

		ALL GOLD
		Expected Coins = 10 * 3 + 100 = 130
		Result Coins = 130
		PASSED

		NO TREASURE
		Expected Coins = 100
		Result Coins = 100
		PASSED

	 HAND SIZE = 500

		ALL COPPER
		Expected Coins = 500 * 1 + 100 = 600
		Result Coins = 600
		PASSED

		ALL SILVER
		Expected Coins = 500 * 2 + 100 = 1100
		Result Coins = 1100
		PASSED

		ALL GOLD
		Expected Coins = 500 * 3 + 100 = 1600
		Result Coins = 1600
		PASSED

		NO TREASURE
		Expected Coins = 100
		Result Coins = 100
		PASSED

-- BONUS = -1 -----------------------------------------------------

	 HAND SIZE = 0

		ALL COPPER
		Expected Coins = 0 * 1 + -1 = -1
		Result Coins = -1
		PASSED

		ALL SILVER
		Expected Coins = 0 * 2 + -1 = -1
		Result Coins = -1
		PASSED

		ALL GOLD
		Expected Coins = 0 * 3 + -1 = -1
		Result Coins = -1
		PASSED

		NO TREASURE
		Expected Coins = -1
		Result Coins = -1
		PASSED

	 HAND SIZE = 1

		ALL COPPER
		Expected Coins = 1 * 1 + -1 = 0
		Result Coins = 0
		PASSED

		ALL SILVER
		Expected Coins = 1 * 2 + -1 = 1
		Result Coins = 1
		PASSED

		ALL GOLD
		Expected Coins = 1 * 3 + -1 = 2
		Result Coins = 2
		PASSED

		NO TREASURE
		Expected Coins = -1
		Result Coins = -1
		PASSED

	 HAND SIZE = 5

		ALL COPPER
		Expected Coins = 5 * 1 + -1 = 4
		Result Coins = 4
		PASSED

		ALL SILVER
		Expected Coins = 5 * 2 + -1 = 9
		Result Coins = 9
		PASSED

		ALL GOLD
		Expected Coins = 5 * 3 + -1 = 14
		Result Coins = 14
		PASSED

		NO TREASURE
		Expected Coins = -1
		Result Coins = -1
		PASSED

	 HAND SIZE = 10

		ALL COPPER
		Expected Coins = 10 * 1 + -1 = 9
		Result Coins = 9
		PASSED

		ALL SILVER
		Expected Coins = 10 * 2 + -1 = 19
		Result Coins = 19
		PASSED

		ALL GOLD
		Expected Coins = 10 * 3 + -1 = 29
		Result Coins = 29
		PASSED

		NO TREASURE
		Expected Coins = -1
		Result Coins = -1
		PASSED

	 HAND SIZE = 500

		ALL COPPER
		Expected Coins = 500 * 1 + -1 = 499
		Result Coins = 499
		PASSED

		ALL SILVER
		Expected Coins = 500 * 2 + -1 = 999
		Result Coins = 999
		PASSED

		ALL GOLD
		Expected Coins = 500 * 3 + -1 = 1499
		Result Coins = 1499
		PASSED

		NO TREASURE
		Expected Coins = -1
		Result Coins = -1
		PASSED

-------------------------------------------------------------------

TESTING COMPLETE
SUCCESS -- No failures!

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'cardSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 203
Branches executed:0.00% of 173
Taken at least once:0.00% of 173
Calls executed:0.00% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:23.12% of 558
Branches executed:20.62% of 417
Taken at least once:17.99% of 417
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

cardtest1.c
----------------------- CARD TEST 1: SMITHY -----------------------

-------------------------------------------------------------------

Test Plan:

For both hand positions 1 and 0...

	1. Correct player's hand size has been increased by 3 - 1 = 2.
		1.a All other players' hand sizes are unchanged.

	2. Correct player's deck size has been decreased by 3.
		2.a All other players' deck sizes are unchanged.

	3. playedCardCount has been incremented

	4. playedCards[playedCardCount - 1] = smithy

-------------------------------------------------------------------

Beginning test with 2 players...


*****
Testing Hand Position = 0...
*****

Initializing game...


Game initialized.

PLAYER 0 PLAYS Smithy FROM HAND POSITION 0 IN 2-PLAYER GAME


TEST 1:
	Player 0's hand count
	is expected value (7):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED

TEST 2:
	Player 0's deck count
	is expected value (2):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED


TEST 3:
	playedCardCount has been
	incremented to 1:		PASSED

TEST 4:
	Last item in playedCards
	array is Smithy:		PASSED

*****
Testing Hand Position = 1...
*****

Initializing game...


Game initialized.

PLAYER 0 PLAYS Smithy FROM HAND POSITION 1 IN 2-PLAYER GAME


TEST 1:
	Player 0's hand count
	is expected value (7):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED

TEST 2:
	Player 0's deck count
	is expected value (2):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED


TEST 3:
	playedCardCount has been
	incremented to 1:		PASSED

TEST 4:
	Last item in playedCards
	array is Smithy:		PASSED
-------------------------------------------------------------------

Beginning test with 3 players...


*****
Testing Hand Position = 0...
*****

Initializing game...


Game initialized.

PLAYER 0 PLAYS Smithy FROM HAND POSITION 0 IN 3-PLAYER GAME


TEST 1:
	Player 0's hand count
	is expected value (7):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED

TEST 2:
	Player 0's deck count
	is expected value (2):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED


TEST 3:
	playedCardCount has been
	incremented to 1:		PASSED

TEST 4:
	Last item in playedCards
	array is Smithy:		PASSED

*****
Testing Hand Position = 1...
*****

Initializing game...


Game initialized.

PLAYER 0 PLAYS Smithy FROM HAND POSITION 1 IN 3-PLAYER GAME


TEST 1:
	Player 0's hand count
	is expected value (7):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED

TEST 2:
	Player 0's deck count
	is expected value (2):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED


TEST 3:
	playedCardCount has been
	incremented to 1:		PASSED

TEST 4:
	Last item in playedCards
	array is Smithy:		PASSED
-------------------------------------------------------------------

Beginning test with 4 players...


*****
Testing Hand Position = 0...
*****

Initializing game...


Game initialized.

PLAYER 0 PLAYS Smithy FROM HAND POSITION 0 IN 4-PLAYER GAME


TEST 1:
	Player 0's hand count
	is expected value (7):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED
	Player 3's hand count
	has not changed:		PASSED

TEST 2:
	Player 0's deck count
	is expected value (2):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED
	Player 3's hand count
	has not changed:		PASSED


TEST 3:
	playedCardCount has been
	incremented to 1:		PASSED

TEST 4:
	Last item in playedCards
	array is Smithy:		PASSED

*****
Testing Hand Position = 1...
*****

Initializing game...


Game initialized.

PLAYER 0 PLAYS Smithy FROM HAND POSITION 1 IN 4-PLAYER GAME


TEST 1:
	Player 0's hand count
	is expected value (7):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED
	Player 3's hand count
	has not changed:		PASSED

TEST 2:
	Player 0's deck count
	is expected value (2):		***FAILED***
	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED
	Player 3's hand count
	has not changed:		PASSED


TEST 3:
	playedCardCount has been
	incremented to 1:		PASSED

TEST 4:
	Last item in playedCards
	array is Smithy:		PASSED
-------------------------------------------------------------------

-------------------------------------------------------------------

TESTING COMPLETE
There were 12 failures.

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'cardSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.94% of 203
Branches executed:13.29% of 173
Taken at least once:1.16% of 173
Calls executed:3.51% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:27.06% of 558
Branches executed:27.10% of 417
Taken at least once:20.14% of 417
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

cardtest2.c
--------------------- CARD TEST 2: ADVENTURER ---------------------

-------------------------------------------------------------------

Test Plan:

For both a deck containing alternating treasures and
non-treasures and a deck containing no treasure:

	1. Player's hand size has been increased by 2
	Treasures - 1 Adventurer = 1 Total Cards if using
	deck with 2+ treasures; otherwise Player's hand size
	is decreased by 1 if no Treasures are found

		1.a All other players' hand sizes are unchanged.

	2. Correct player's deck size has been decreased by
	at least 2.

		2.a All other players' deck sizes are unchanged.

	3. Player's discardCount = # drawn cards - 2 if
	using deck with 2+ treasures; otherwise Player's
	discardCount = # drawn cards.

	4. playedCardCount has been incremented

	5. Last item in playedCards array is adventurer

-------------------------------------------------------------------

Beginning test with 2 players...


*****
Testing Deck with 2+ Treasure Cards
*****

Initializing game...

Player's deck count: 10


Game initialized.

PLAYER 0 PLAYS Adventurer FROM HAND POSITION 0 IN 2-PLAYER GAME


TEST 1: Hand count updated appropriately
	test handCount = 6
	expected handCount = 6
					PASSED

	Player 1's hand count
	has not changed:		PASSED

TEST 2: Player 0's deck is decreased appropriately.
	Player 0's deck count
	decreased by >= 2:		PASSED
	Player 1's deck count
	has not changed:		PASSED

TEST 3: Player 0's discardCount is updated appropriately.
	Player 0's discardCount
	equals # drawn cards - 2
	# drawn cards = 2
	discardCount = 1
					***FAILED***

	First discarded card
	25 == sea hag:		PASSED

	Last discarded card
	25 == sea hag:			PASSED

TEST 4: PlayedCardCount is updated appropriately.
	test playedCardCount = 0
	expected playedCardCount = 1
					***FAILED***

TEST 5: Last item in playedCards array is Adventurer.
					***FAILED***


*****
Testing Deck with NO Treasure Cards
*****

Initializing game...

Player's deck count: 10


Game initialized.

PLAYER 0 PLAYS Adventurer FROM HAND POSITION 0 IN 2-PLAYER GAME


TEST 1: Hand count updated appropriately
	test handCount = 5
	expected handCount = 4
					***FAILED***

	Player 1's hand count
	has not changed:		PASSED

TEST 2: Player 0's deck is decreased appropriately.
	Player 0's deck count
	exhausted (is now 0):		PASSED
	Player 1's deck count
	has not changed:		PASSED

TEST 3: Player 0's discardCount is updated appropriately.
	Player 0's discardCount
	equals # drawn cards
	# drawn cards = 10
	discardCount = 10
					PASSED

TEST 4: PlayedCardCount is updated appropriately.
	test playedCardCount = 0
	expected playedCardCount = 1
					***FAILED***

TEST 5: Last item in playedCards array is Adventurer.
					***FAILED***

-------------------------------------------------------------------

Beginning test with 3 players...


*****
Testing Deck with 2+ Treasure Cards
*****

Initializing game...

Player's deck count: 10


Game initialized.

PLAYER 0 PLAYS Adventurer FROM HAND POSITION 0 IN 3-PLAYER GAME


TEST 1: Hand count updated appropriately
	test handCount = 6
	expected handCount = 6
					PASSED

	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED

TEST 2: Player 0's deck is decreased appropriately.
	Player 0's deck count
	decreased by >= 2:		PASSED
	Player 1's deck count
	has not changed:		PASSED
	Player 2's deck count
	has not changed:		PASSED

TEST 3: Player 0's discardCount is updated appropriately.
	Player 0's discardCount
	equals # drawn cards - 2
	# drawn cards = 2
	discardCount = 1
					***FAILED***

	First discarded card
	25 == sea hag:		PASSED

	Last discarded card
	25 == sea hag:			PASSED

TEST 4: PlayedCardCount is updated appropriately.
	test playedCardCount = 0
	expected playedCardCount = 1
					***FAILED***

TEST 5: Last item in playedCards array is Adventurer.
					***FAILED***


*****
Testing Deck with NO Treasure Cards
*****

Initializing game...

Player's deck count: 10


Game initialized.

PLAYER 0 PLAYS Adventurer FROM HAND POSITION 0 IN 3-PLAYER GAME


TEST 1: Hand count updated appropriately
	test handCount = 5
	expected handCount = 4
					***FAILED***

	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED

TEST 2: Player 0's deck is decreased appropriately.
	Player 0's deck count
	exhausted (is now 0):		PASSED
	Player 1's deck count
	has not changed:		PASSED
	Player 2's deck count
	has not changed:		PASSED

TEST 3: Player 0's discardCount is updated appropriately.
	Player 0's discardCount
	equals # drawn cards
	# drawn cards = 10
	discardCount = 10
					PASSED

TEST 4: PlayedCardCount is updated appropriately.
	test playedCardCount = 0
	expected playedCardCount = 1
					***FAILED***

TEST 5: Last item in playedCards array is Adventurer.
					***FAILED***

-------------------------------------------------------------------

Beginning test with 4 players...


*****
Testing Deck with 2+ Treasure Cards
*****

Initializing game...

Player's deck count: 10


Game initialized.

PLAYER 0 PLAYS Adventurer FROM HAND POSITION 0 IN 4-PLAYER GAME


TEST 1: Hand count updated appropriately
	test handCount = 6
	expected handCount = 6
					PASSED

	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED
	Player 3's hand count
	has not changed:		PASSED

TEST 2: Player 0's deck is decreased appropriately.
	Player 0's deck count
	decreased by >= 2:		PASSED
	Player 1's deck count
	has not changed:		PASSED
	Player 2's deck count
	has not changed:		PASSED
	Player 3's deck count
	has not changed:		PASSED

TEST 3: Player 0's discardCount is updated appropriately.
	Player 0's discardCount
	equals # drawn cards - 2
	# drawn cards = 2
	discardCount = 1
					***FAILED***

	First discarded card
	25 == sea hag:		PASSED

	Last discarded card
	25 == sea hag:			PASSED

TEST 4: PlayedCardCount is updated appropriately.
	test playedCardCount = 0
	expected playedCardCount = 1
					***FAILED***

TEST 5: Last item in playedCards array is Adventurer.
					***FAILED***


*****
Testing Deck with NO Treasure Cards
*****

Initializing game...

Player's deck count: 10


Game initialized.

PLAYER 0 PLAYS Adventurer FROM HAND POSITION 0 IN 4-PLAYER GAME


TEST 1: Hand count updated appropriately
	test handCount = 5
	expected handCount = 4
					***FAILED***

	Player 1's hand count
	has not changed:		PASSED
	Player 2's hand count
	has not changed:		PASSED
	Player 3's hand count
	has not changed:		PASSED

TEST 2: Player 0's deck is decreased appropriately.
	Player 0's deck count
	exhausted (is now 0):		PASSED
	Player 1's deck count
	has not changed:		PASSED
	Player 2's deck count
	has not changed:		PASSED
	Player 3's deck count
	has not changed:		PASSED

TEST 3: Player 0's discardCount is updated appropriately.
	Player 0's discardCount
	equals # drawn cards
	# drawn cards = 10
	discardCount = 10
					PASSED

TEST 4: PlayedCardCount is updated appropriately.
	test playedCardCount = 0
	expected playedCardCount = 1
					***FAILED***

TEST 5: Last item in playedCards array is Adventurer.
					***FAILED***

-------------------------------------------------------------------

-------------------------------------------------------------------

TESTING COMPLETE
There were 18 failures.

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'cardSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:4.43% of 203
Branches executed:13.29% of 173
Taken at least once:1.73% of 173
Calls executed:5.26% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:31.90% of 558
Branches executed:30.94% of 417
Taken at least once:23.74% of 417
Calls executed:16.84% of 95
Creating 'dominion.c.gcov'

cardtest3.c
---------------------- CARD TEST 3: EMBARGO -----------------------

-------------------------------------------------------------------

Test Plan:

Attempt to embargo every possible pile.

1a. If the pile is valid, an embargo token is added,
the gameState's coins count is increased by 2, and the
function returns 0.

1b. If the pile is invalid, nothing happens and the
function returns -1.

2. If the choice was valid, check that the played
Embargo card is trashed from the player's hand: the
player's handCount is decremented, the card at handPos
is no longer Embargo, the player's discardCount has not
been incremented, and the playedCardCount has not been
incremented; if it was invalid, check that nothing has
changed.

-------------------------------------------------------------------

Beginning test with 2 players...

*******************************************************************

Testing Card 0

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[0]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 1

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[1]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 2

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[2]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 3

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[3]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 4

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[4]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 5

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[5]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 6

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[6]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 7

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[7]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 8

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 9

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 10

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[10]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 11

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[11]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 12

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 13

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[13]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 14

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[14]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 15

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 16

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 17

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[17]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 18

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 19

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[19]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 20

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 21

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 22

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[22]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 23

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 24

	Valid?	0

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	No Embargo Tokens Applied:		PASSED

	Coins not increased:			***FAILED***

	Function returned -1:			PASSED

TEST 2: Embargo card is ignored (choice is invalid).

	Player's hand count is
	still the same:			PASSED

	Card at handPos is still
	embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 25

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[25]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

*******************************************************************

Testing Card 26

	Valid?	1

Initializing game...


Game initialized.

Calling embargo()...

TEST 1: Embargo token is applied correctly.

	Embargo Token applied
	to embargoTokens[26]:		PASSED

	Embargo Tokens not applied
	to any other piles.		PASSED

	Coins increased from 4
	to 6:				PASSED

	Function returned 0:		PASSED

TEST 2: Embargo card is trashed successfully (choice is valid).

	Player's hand count was
	decremented:			PASSED

	Card at handPos is no
	longer embargo:			PASSED

	Discard count has not been
	incremented for anyone:		PASSED

	playedCardCount has not been
	incremented:			PASSED

-------------------------------------------------------------------

TESTING COMPLETE
There were 10 failures.

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'cardSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:7.39% of 203
Branches executed:14.45% of 173
Taken at least once:3.47% of 173
Calls executed:7.02% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:32.97% of 558
Branches executed:31.41% of 417
Taken at least once:24.46% of 417
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

cardtest4.c
-------------------- CARD TEST 4: GREAT HALL ----------------------

-------------------------------------------------------------------

Test Plan:

Attempt to play Great Hall from each hand position, with a test
hand size being 5.

1. Verify hand count has not changed. (Hand count is increased
by 1 when Great Hall is played, but decreased by 1 when the played
card is discarded.)

2. Verify player's hand at handPos is now occupied by the
drawn card. (When the new card is drawn, it is added to the end
of the hand. When the played Great Hall card is discarded, it is
replaced by the last card in the hand.)

3. Verify that numActions has been incremented by 1.

4. Verify that playedCardCount has been incremented by 1.

5. Verify that playedCards[playedCardCount - 1] = great_hall.

-------------------------------------------------------------------

Beginning test with 2 players...

*******************************************************************

TESTING HAND POSITION 0

Initializing game...


HAND:	16	4	4	4	4

Game initialized.


TEST 1: Verify hand count has not changed.

	Hand Count Predicted:	5
	Actual Hand Count:	5

		PASSED

TEST 2: Verify player's hand at handPos now holds drawn card.

	Card Predicted:	25
	Actual Card:	25

		PASSED

TEST 3: Verify numActions has been incremented by 1.

	numActions Predicted:	2
	Actual numActions:	2

		PASSED

TEST 4: Verify that playedCards[playedCardCount - 1] = great_hall.

	Card Predicted:	16
	Actual card:	16

		PASSED

*******************************************************************

TESTING HAND POSITION 1

Initializing game...


HAND:	4	16	4	4	4

Game initialized.


TEST 1: Verify hand count has not changed.

	Hand Count Predicted:	5
	Actual Hand Count:	5

		PASSED

TEST 2: Verify player's hand at handPos now holds drawn card.

	Card Predicted:	25
	Actual Card:	25

		PASSED

TEST 3: Verify numActions has been incremented by 1.

	numActions Predicted:	2
	Actual numActions:	2

		PASSED

TEST 4: Verify that playedCards[playedCardCount - 1] = great_hall.

	Card Predicted:	16
	Actual card:	16

		PASSED

*******************************************************************

TESTING HAND POSITION 2

Initializing game...


HAND:	4	4	16	4	4

Game initialized.


TEST 1: Verify hand count has not changed.

	Hand Count Predicted:	5
	Actual Hand Count:	5

		PASSED

TEST 2: Verify player's hand at handPos now holds drawn card.

	Card Predicted:	25
	Actual Card:	25

		PASSED

TEST 3: Verify numActions has been incremented by 1.

	numActions Predicted:	2
	Actual numActions:	2

		PASSED

TEST 4: Verify that playedCards[playedCardCount - 1] = great_hall.

	Card Predicted:	16
	Actual card:	16

		PASSED

*******************************************************************

TESTING HAND POSITION 3

Initializing game...


HAND:	4	4	4	16	4

Game initialized.


TEST 1: Verify hand count has not changed.

	Hand Count Predicted:	5
	Actual Hand Count:	5

		PASSED

TEST 2: Verify player's hand at handPos now holds drawn card.

	Card Predicted:	25
	Actual Card:	25

		PASSED

TEST 3: Verify numActions has been incremented by 1.

	numActions Predicted:	2
	Actual numActions:	2

		PASSED

TEST 4: Verify that playedCards[playedCardCount - 1] = great_hall.

	Card Predicted:	16
	Actual card:	16

		PASSED

*******************************************************************

TESTING HAND POSITION 4

Initializing game...


HAND:	4	4	4	4	16

Game initialized.


TEST 1: Verify hand count has not changed.

	Hand Count Predicted:	5
	Actual Hand Count:	5

		PASSED

TEST 2: Verify player's hand at handPos now holds drawn card.

	Card Predicted:	25
	Actual Card:	25

		PASSED

TEST 3: Verify numActions has been incremented by 1.

	numActions Predicted:	2
	Actual numActions:	2

		PASSED

TEST 4: Verify that playedCards[playedCardCount - 1] = great_hall.

	Card Predicted:	16
	Actual card:	16

		PASSED

-------------------------------------------------------------------

TESTING COMPLETE
SUCCESS -- No failures!

-------------------------------------------------------------------

Function 'cardRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'cardCouncil_room'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'cardGardens'
Lines executed:0.00% of 2
No branches
No calls

Function 'cardAdventurer'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'cardSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:9.36% of 203
Branches executed:14.45% of 173
Taken at least once:4.05% of 173
Calls executed:10.53% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:33.69% of 558
Branches executed:31.41% of 417
Taken at least once:24.94% of 417
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

